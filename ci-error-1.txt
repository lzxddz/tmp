
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `/home/mono/workspace/mongo/install/bin/mongod --eloqSkipRedoLog=1 --config ./co'.
Program terminated with signal SIGABRT, Aborted.
--Type <RET> for more, q to quit, c to continue without paging--
# 0 0x0000769a901b8b2c in pthread_kill() from / lib / x86_64 - linux - gnu / libc.so.6
[Current thread is 1 (Thread 0x769a4f4726c0 (LWP 14577))]
(gdb) bt
# 0 0x0000769a901b8b2c in pthread_kill() from / lib / x86_64 - linux - gnu / libc.so.6
# 1 0x0000769a9015f27e in raise() from / lib / x86_64 - linux - gnu / libc.so.6
# 2 0x0000769a901428ff in abort() from / lib / x86_64 - linux - gnu / libc.so.6
# 3 0x0000769a9014281b in ? ?() from / lib / x86_64 - linux - gnu / libc.so.6
# 4 0x0000769a90155517 in __assert_fail() from / lib / x86_64 - linux - gnu / libc.so.6
# 5 0x0000769a85852011 in txservice::UpsertTableIndexOp::FillCommitLogRequest(this =             \
                                                                                  0x423c1890000, \
                          txm = 0x423f8167800)
    at /home/mono/workspace/mongo/src/mongo/db/modules/eloq/tx_service/src/tx_index_operation.cpp:1852
# 6 0x0000769a8584e93c in txservice::UpsertTableIndexOp::Forward(this = 0x423c1890000, \
                          txm = 0x423f8167800)
    at /home/mono/workspace/mongo/src/mongo/db/modules/eloq/tx_service/src/tx_index_operation.cpp:1173
# 7 0x0000769a852f3715 in txservice::TransactionExecution::Forward(this = 0x423f8167800)
    at /home/mono/workspace/mongo/src/mongo/db/modules/eloq/tx_service/src/tx_execution.cpp:444
# 8 0x0000769a863c9bc0 in txservice::TxProcessor::CheckResumeTx( \
    this = 0x4234fb24000)                                        \
        at src / mongo / db / modules / eloq / tx_service / include / tx_service.h : 771
# 9 0x0000769a863c8445 in txservice::TxProcessor::RunOneRound(this = 0x4234fb24000, \
                          active_cnt = @0x769a4f463188 : 0,                         \
                          req_cnt = @0x769a4f463190 : 1,
    yield=@0x769a4f463187: false, shard_status=std::atomic<txservice::TxShardStatus> = { txservice::TxShardStatus::Occupied }, is_ext_proc=true)
    at src/mongo/db/modules/eloq/tx_service/include/tx_service.h:379
# 10 0x0000769a863c9603 in txservice::TxProcessor::TxProcessorFunctor()::{ \
    lambda() #1 } ::operator()() const(__closure = 0x423f80100a0)
    at src/mongo/db/modules/eloq/tx_service/include/tx_service.h:619
# 11 0x0000769a86421e2a in std::__invoke_impl<void,                                         \
    txservice::TxProcessor::TxProcessorFunctor()::{lambda() #1 } &                          \
    >(std::__invoke_other, txservice::TxProcessor::TxProcessorFunctor()::{lambda() #1 } &)( \
        __f =...) at / usr / include / c ++ / 13 / bits / invoke.h : 61
# 12 0x0000769a8640dd68 in std::__invoke_r<void,                       \
    txservice::TxProcessor::TxProcessorFunctor()::{lambda() #1 } &     \
    >(txservice::TxProcessor::TxProcessorFunctor()::{lambda() #1 } &)( \
        __fn =...) at / usr / include / c ++ / 13 / bits / invoke.h : 111
# 13 0x0000769a863f73ec in std::_Function_handler<                     \
    void(),                                                            \
         txservice::TxProcessor::TxProcessorFunctor()::{lambda() #1 }> \
         ::_M_invoke(std::_Any_data const&)(
    __functor=...) at /usr/include/c++/13/bits/std_function.h:290
# 14 0x0000769a9102071a in std::function<void()> ::operator()() \
    const(this = 0x4234e8252e0) at / usr / include / c ++ / 13 / bits / std_function.h : 591
# 15 0x0000769a8addae16 in operator()(__closure = 0x4234fc36b40) at src / mongo / transport / \
                                      service_executor_coroutine.cpp : 209
# 16 0x0000769a8addc526 in std::__invoke_impl<void,                                 \
    mongo::transport::ServiceExecutorCoroutine::_startWorker(int16_t)::<lambda()> & \
    >(std::__invoke_other,                                                          \
      struct {... } &)(__f =...) at / usr / include / c ++ / 13 / bits / invoke.h : 61
# 17 0x0000769a8addc12f in std::__invoke_r<void,                                    \
    mongo::transport::ServiceExecutorCoroutine::_startWorker(int16_t)::<lambda()> & \
    >(struct {... } &)(__fn =...)
    at /usr/include/c++/13/bits/invoke.h:111
# 18 0x0000769a8addbe2d in std::_Function_handler<                                           \
    void(),                                                                                  \
         mongo::transport::ServiceExecutorCoroutine::_startWorker(int16_t)::<lambda()>>      \
         ::_M_invoke(const std::_Any_data&)(__functor =...) at / usr / include / c ++ / 13 / \
                                            bits / std_function.h : 290
# 19 0x0000769a9102071a in std::function<void()> ::operator()() \
    const(this = 0x4234fc36b40) at / usr / include / c ++ / 13 / bits / std_function.h : 591
# 20 0x0000769a86eb34b4 in mongo::(anonymous namespace)::runFunc( \
    ctx = 0x4234fc36b40) at src / mongo / transport / service_entry_point_utils.cpp : 55
# 21 0x0000769a901b6aa4 in ? ?() from / lib / x86_64 - linux - gnu / libc.so.6
# 22 0x0000769a90243c3c in ? ?() from / lib / x86_64 - linux - gnu / libc.so.6
(gdb) p 2eration.cpp:1852eration.cpp:1852~Quit
(gdb) p txm->commit_ts_
No symbol "txm" in current context.
(gdb) select-frame 5
(gdb) p txm->commit_ts
There is no member or method named commit_ts.
(gdb) p txm->commit_ts_
$1 = 0
(gdb) p ed_ts_~failed_ts_~tx_op_failed_ts_Quit
(gdb) p tx_op_failed_ts_
$2 = 0
(gdb) txm->commit_ts_
Undefined command: "txm->commit_ts_".  Try "help".
(gdb) p txm
$3 = (txservice::TransactionExecution *) 0x423f8167800
(gdb) p *txm
$4 = {<txservice::LinkedTransaction> = {prev_ = 0x4234fb24578, next_ = 0x0}, static LargeTxKeySize = 1000, static LoopCnt = 10000, init_tx_req_ = std::unique_ptr<txservice::InitTxRequest> = {get() = 0x423f8070540},
  commit_tx_req_ = std::unique_ptr<txservice::CommitTxRequest> = {get() = 0x423f8040fc0}, cc_handler_ = 0x4234f06a800, txlog_ = 0x4234eb27fc0, tx_processor_ = 0x4234fb24000, txid_ = {global_core_id_ = 1, ident_ = 1715, vec_idx_ = 50},
  tx_number_ = std::atomic<unsigned long> = { 4294969011 }, tx_term_ = 1, start_ts_ = 1754231846491829, commit_ts_ = 0, commit_ts_bound_ = 1754231846691972, tx_status_ = std::atomic<txservice::TxnStatus> = { txservice::TxnStatus::Ongoing },
  command_id_ = std::atomic<unsigned short> = { 21 }, forward_latch_ = std::atomic<int> = { -1 }, state_forward_cnt_ = 0, state_clock_ = 1754231846691966, state_stack_ = std::vector of length 1, capacity 2 = {0x423c1890000}, idle_rep_ = 0, rw_set_ = {
    static MaxWriteSetBytesCnt = 65011712,
    data_rset_ = {<absl::container_internal::raw_hash_map<absl::container_internal::FlatHashMapPolicy<txservice::CcEntryAddr, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> >, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >> = {<absl::container_internal::raw_hash_set<absl::container_internal::FlatHashMapPolicy<txservice::CcEntryAddr, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> >, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >> = {
          settings_ = {<absl::container_internal::internal_compressed_tuple::CompressedTupleImpl<absl::container_internal::CompressedTuple<absl::container_internal::CommonFields, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >, std::integer_sequence<unsigned long, 0, 1, 2, 3>, true>> = {<absl::container_internal::internal_compressed_tuple::uses_inheritance> = {<No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<absl::container_internal::CommonFields, 0, false>> = {value = {<absl::container_internal::CommonFieldsGenerationInfoDisabled> = {<No data fields>}, capacity_ = 7,
                  size_ = 0, heap_or_soo_ = {heap = {control = 0x423c16c0c48, slot_array = {p = 0x423c16c0c60}},
                    soo_data = "H\fl\301#\004\000\000`\fl\301#\004\000"}}}, <absl::container_internal::internal_compressed_tuple::Storage<absl::hash_internal::Hash<txservice::CcEntryAddr>, 1, true>> = {<absl::hash_internal::Hash<txservice::CcEntryAddr>> = {<absl::hash_internal::HashImpl<txservice::CcEntryAddr>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::equal_to<txservice::CcEntryAddr>, 2, true>> = {<std::equal_to<txservice::CcEntryAddr>> = {<std::binary_function<txservice::CcEntryAddr, txservice::CcEntryAddr, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >, 3, true>> = {<std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >> = {<std::__new_allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, <No data fields>},
    meta_data_rset_ = {<absl::container_internal::raw_hash_map<absl::container_internal::FlatHashMapPolicy<txservice::CcEntryAddr, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> >, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >> = {<absl::container_internal::raw_hash_set<absl::container_internal::FlatHashMapPolicy<txservice::CcEntryAddr, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> >, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >> = {
          settings_ = {<absl::container_internal::internal_compressed_tuple::CompressedTupleImpl<absl::container_internal::CompressedTuple<absl::container_internal::CommonFields, absl::hash_internal::Hash<txservice::CcEntryAddr>, std::equal_to<txservice::CcEntryAddr>, std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > > >, std::integer_sequence<unsigned long, 0, 1, 2, 3>, true>> = {<absl::container_internal::internal_compressed_tuple::uses_inheritance> = {<No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<absl::container_internal::CommonFields, 0, false>> = {value = {<absl::container_internal::CommonFieldsGenerationInfoDisabled> = {<No data fields>}, capacity_ = 15,
                  size_ = 2, heap_or_soo_ = {heap = {control = 0x423c1625e88, slot_array = {p = 0x423c1625ea8}},
                    soo_data = "\210^b\301#\004\000\000\250^b\301#\004\000"}}}, <absl::container_internal::internal_compressed_tuple::Storage<absl::hash_internal::Hash<txservice::CcEntryAddr>, 1, true>> = {<absl::hash_internal::Hash<txservice::CcEntryAddr>> = {<absl::hash_internal::HashImpl<txservice::CcEntryAddr>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::equal_to<txservice::CcEntryAddr>, 2, true>> = {<std::equal_to<txservice::CcEntryAddr>> = {<std::binary_function<txservice::CcEntryAddr, txservice::CcEntryAddr, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >, 3, true>> = {<std::allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >> = {<std::__new_allocator<std::pair<txservice::CcEntryAddr const, std::pair<txservice::ReadSetEntry, std::basic_string_view<char, std::char_traits<char> > const> > >> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, <No data fields>},
    read_lock_ng_terms_ = {<absl::container_internal::raw_hash_map<absl::container_internal::FlatHashMapPolicy<unsigned int, long>, absl::hash_internal::Hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, long> > >> = {<absl::container_internal::raw_hash_set<absl::container_internal::FlatHashMapPolicy<unsigned int, long>, absl::hash_internal::Hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, long> > >> = {
          settings_ = {<absl::container_internal::internal_compressed_tuple::CompressedTupleImpl<absl::container_internal::CompressedTuple<absl::container_internal::CommonFields, absl::hash_internal::Hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, long> > >, std::integer_sequence<unsigned long, 0, 1, 2, 3>, true>> = {<absl::container_internal::internal_compressed_tuple::uses_inheritance> = {<No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<absl::container_internal::CommonFields, 0, false>> = {value = {<absl::container_internal::CommonFieldsGenerationInfoDisabled> = {<No data fields>}, capacity_ = 1, size_ = 0, heap_or_soo_ = {heap = {control = 0x769a00000000, slot_array = {p = 0x1}},
                    soo_data = "\000\000\000\000\232v\000\000\001\000\000\000\000\000\000"}}}, <absl::container_internal::internal_compressed_tuple::Storage<absl::hash_internal::Hash<unsigned int>, 1, true>> = {<absl::hash_internal::Hash<unsigned int>> = {<absl::hash_internal::HashImpl<unsigned int>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::equal_to<unsigned int>, 2, true>> = {<std::equal_to<unsigned int>> = {<std::binary_function<unsigned int, unsigned int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, <absl::container_internal::internal_compressed_tuple::Storage<std::allocator<std::pair<unsigned int const, long> >, 3, true>> = {<std::allocator<std::pair<unsigned int const, long> >> = {<std::__new_allocator<std::pair<unsigned int const, long> >> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}, <No data fields>}, wset_ = std::unordered_map with 0 elements, wset_cnt_ = 0,
    wset_bytes_cnt_ = 0, forward_write_cnt_ = 0, catalog_wset_ = std::map with 0 elements}, cmd_set_ = {static MaxWriteSetBytesCnt = 65011712, cmd_set_internal_ = std::unordered_map with 0 elements, cce_with_writelock_size_ = 0, need_forward_cmd_cnt_ = 0},
  cache_miss_read_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }}, schema_op_ = std::unique_ptr<txservice::UpsertTableOp> = {get() = 0x0}, split_flush_op_ = std::unique_ptr<txservice::SplitFlushRangeOp> = {
    get() = 0x0}, index_op_ = std::unique_ptr<txservice::UpsertTableIndexOp> = {get() = 0x423c1890000}, cluster_scale_op_ = std::unique_ptr<txservice::ClusterScaleOp> = {get() = 0x0}, migration_op_ = std::unique_ptr<txservice::DataMigrationOp> = {get() = 0x0},
  invalidate_table_cache_composite_op_ = std::unique_ptr<txservice::InvalidateTableCacheCompositeOp> = {get() = 0x0}, wset_iters_ = std::unordered_map with 0 elements, wset_reverse_iters_ = std::unordered_map with 0 elements,
  scans_ = std::unordered_map with 0 elements, scan_alias_cnt_ = 0, void_resp_ = 0x0, rec_resp_ = 0x0, vct_rec_resp_ = 0x0, rtp_resp_ = 0x0, bool_resp_ = 0x0, kvp_resp_ = 0x0, uint64_resp_ = 0x0, int64_vec_resp_ = 0x0, upsert_resp_ = 0x4241f69e1f8, string_resp_ = 0x0,
  tx_req_queue_ = {vec_ = std::unique_ptr<txservice::TxRequest *[]> = {get() = 0x423f80b1040}, head_ = 1, cnt_ = 0, capacity_ = 8}, req_queue_lock_ = {lock_ = std::atomic<bool> = { false }}, iso_level_ = txservice::IsolationLevel::ReadCommitted,
  protocol_ = txservice::CcProtocol::OCC, bind_to_ext_proc_ = true, init_txn_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c550 <vtable for txservice::InitTxnOperation+16>, retry_num_ = 3, is_running_ = true,
      static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, log_group_id_ = 4294967295, tx_ng_id_ = 0, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2b28 <vtable for txservice::CcHandlerResult<txservice::InitTxResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {txid_ = {global_core_id_ = 1, ident_ = 1715, vec_idx_ = 50}, start_ts_ = 1754231846491829, term_ = 1},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::InitTxResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::InitTxResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, lock_range_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c700 <vtable for txservice::ReadLocalOperation+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, key_ = 0x0, table_name_ = {{name_str_ = "", name_view_ = "__empty"}, own_string_ = false, type_ = txservice::TableType::RangePartition, engine_ = txservice::TableEngine::None},
    rec_ = 0x0, execute_immediately_ = true, hd_result_ = 0x0}, range_rec_ = {<txservice::TxRecord> = {_vptr.TxRecord = 0x769a867c2e08 <vtable for txservice::RangeRecord+16>}, {range_info_ = 0x423b6483e70, range_info_uptr_ = std::unique_ptr<txservice::RangeInfo> = {
        get() = 0x423b6483e70}}, is_info_owner_ = false, {range_owner_rec_ = 0x4234fb30990, range_owner_bucket_ = 0x4234fb30990}, {new_range_owner_rec_ = std::unique_ptr<std::vector<txservice::LruEntry*, std::allocator<txservice::LruEntry*> >> = {get() = 0x0},
      new_range_owner_bucket_ = std::unique_ptr<std::vector<txservice::BucketInfo const*, std::allocator<txservice::BucketInfo const*> >> = {get() = 0x0}}, is_read_result_ = true}, lock_range_result_ = {<txservice::CcHandlerResultBase> = {
      _vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
      error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
      block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x0, ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 4551493121088, node_group_id_ = 0, core_id_ = 1, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Unknown,
      lock_type_ = txservice::LockType::NoLock, is_local_ = true},
    post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
    runtime_resume_func_ = 0x0}, read_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c730 <vtable for txservice::ReadOperation+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, read_type_ = txservice::ReadType::Inside, protocol_ = txservice::CcProtocol::Locking, iso_level_ = txservice::IsolationLevel::RepeatableRead, read_tx_req_ = 0x4241f69e200,
    read_outside_tx_req_ = 0x0, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x0, ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 4551493113728, node_group_id_ = 0, core_id_ = 1, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Unknown,
--Type <RET> for more, q to quit, c to continue without paging--
        lock_type_ = txservice::LockType::NoLock, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, local_cache_miss_ = false, lock_range_result_ = 0x423f8167c60}, scan_open_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c490 <vtable for txservice::ScanOpenOperation+16>, retry_num_ = 3,
      is_running_ = true, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2af0 <vtable for txservice::CcHandlerResult<txservice::ScanOpenResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {scanner_ = std::unique_ptr<txservice::CcScanner> = {get() = 0x0}, scan_alias_ = 0, cc_node_terms_ = std::unordered_map with 0 elements,
        cc_node_returned_ = std::unordered_map with 0 elements},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ScanOpenResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ScanOpenResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, table_name_ = 0x423f82ec4c8, index_type_ = txservice::ScanIndexType::Primary, start_key_ = 0x423f8119358, inclusive_ = false, direction_ = txservice::ScanDirection::Forward, is_ckpt_delta_ = false, tx_req_ = 0x423f8119398},
  scan_next_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c460 <vtable for txservice::ScanNextOperation+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, scan_state_ = 0x0, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2ab8 <vtable for txservice::CcHandlerResult<txservice::ScanNextResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {is_local_ = false, term_ = 0, node_group_id_ = 0},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ScanNextResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ScanNextResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, slice_hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2a80 <vtable for txservice::CcHandlerResult<txservice::RangeScanSliceResult>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_key_ = {interface_ = 0x0, obj_addr_ = 0, static mask = 18446744073709551614}, slice_position_ = txservice::SlicePosition::LastSlice, cc_ng_id_ = 0, {
          ccm_scanner_ = 0x423c15803c0, remote_scan_caches_ = 0x423c15803c0}, is_local_ = true, last_key_status_ = std::atomic<txservice::RangeScanSliceResult::LastKeySetStatus> = { txservice::RangeScanSliceResult::LastKeySetStatus::Unset }},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::RangeScanSliceResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::RangeScanSliceResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, range_table_name_ = {{name_str_ = "", name_view_ = "__empty"}, own_string_ = false, type_ = txservice::TableType::RangePartition, engine_ = txservice::TableEngine::None}, range_rec_ = {<txservice::TxRecord> = {
        _vptr.TxRecord = 0x769a867c2e08 <vtable for txservice::RangeRecord+16>}, {range_info_ = 0x423b6483e70, range_info_uptr_ = std::unique_ptr<txservice::RangeInfo> = {get() = 0x423b6483e70}}, is_info_owner_ = false, {range_owner_rec_ = 0x4234fb30990,
        range_owner_bucket_ = 0x4234fb30990}, {new_range_owner_rec_ = std::unique_ptr<std::vector<txservice::LruEntry*, std::allocator<txservice::LruEntry*> >> = {get() = 0x0},
        new_range_owner_bucket_ = std::unique_ptr<std::vector<txservice::BucketInfo const*, std::allocator<txservice::BucketInfo const*> >> = {get() = 0x0}}, is_read_result_ = true}, lock_range_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x423f8167fe0, ts_ = 1754231845391012, cce_addr_ = {cce_lock_ptr_ = 4551493122048, node_group_id_ = 0, core_id_ = 1, term_ = std::atomic<long> = { 1 }},
        rec_status_ = txservice::RecordStatus::Normal, lock_type_ = txservice::LockType::ReadLock, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, unlock_range_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, alias_ = 0, tx_req_ = 0x4241f69e5e0}, drain_batch_ = std::vector of length 0, capacity 4,
  scan_close_req_pool_ = std::unique_ptr<CircularQueue<std::unique_ptr<txservice::ScanCloseTxRequest, std::default_delete<txservice::ScanCloseTxRequest> > >> = {get() = 0x423f8010f20}, locked_db_ = {_M_elems = {{first = 0x0, second = 0} <repeats 16 times>}},
  read_catalog_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c700 <vtable for txservice::ReadLocalOperation+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, key_ = 0x0, table_name_ = {{name_str_ = "", name_view_ = "__empty"}, own_string_ = false, type_ = txservice::TableType::RangePartition, engine_ = txservice::TableEngine::None},
    rec_ = 0x0, execute_immediately_ = true, hd_result_ = 0x0}, read_catalog_key_ = {table_name_ = {{name_str_ = "", name_view_ = "__empty"}, own_string_ = false, type_ = txservice::TableType::Primary, engine_ = txservice::TableEngine::None}},
  read_catalog_record_ = {<txservice::TxRecord> = {_vptr.TxRecord = 0x769a85d2d428 <vtable for txservice::CatalogRecord+16>}, schema_ = std::shared_ptr<const txservice::TableSchema> (empty) = {get() = 0x0},
    dirty_schema_ = std::shared_ptr<const txservice::TableSchema> (empty) = {get() = 0x0}, schema_ts_ = 0, schema_image_ = "", dirty_schema_image_ = "", cntl_ = std::shared_ptr<txservice::ReaderWriterObject<txservice::TableSchema>> (empty) = {get() = 0x0}},
  catalog_tx_key_ = {interface_ = 0x769a86806ca0 <txservice::CatalogKey::TxKeyImpl()::tx_key_impl>, obj_addr_ = 4552532591224, static mask = 18446744073709551614}, read_catalog_result_ = {<txservice::CcHandlerResultBase> = {
      _vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
      error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
      block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x0, ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Normal,
      lock_type_ = txservice::LockType::NoLock, is_local_ = true},
    post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
    runtime_resume_func_ = 0x0}, obj_cmd_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c130 <vtable for txservice::ObjectCommandOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, table_name_ = 0x0, key_ = 0x0, command_ = 0x0, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2a48 <vtable for txservice::CcHandlerResult<txservice::ObjectCommandResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {commit_ts_ = 0, last_vali_ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Unknown,
        lock_acquired_ = txservice::LockType::NoLock, object_modified_ = false, is_local_ = true, cmd_result_ = 0x0, ttl_expired_ = false, ttl_ = 18446744073709551615, ttl_reset_ = false},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ObjectCommandResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ObjectCommandResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, auto_commit_ = false, always_redirect_ = false, lock_range_result_ = 0x423f8167c60, catalog_read_success_ = false}, multi_obj_cmd_ = {<txservice::TransactionOperation> = {
      _vptr.TransactionOperation = 0x769a85d2c100 <vtable for txservice::MultiObjectCommandOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
    txm_ = 0x423f8167800, tx_req_ = 0x0, vct_hd_result_ = std::vector of length 0, capacity 0, atm_cnt_ = std::atomic<int> = { 0 }, atm_block_cnt_ = std::atomic<int> = { 0 }, atm_local_cnt_ = std::atomic<int> = { 0 },
    atm_err_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, vct_abort_hd_result_ = std::vector of length 0, capacity 0, is_block_command_ = false, range_lock_cur_ = 0, vct_key_shard_code_ = std::vector of length 0, capacity 0,
    lock_range_result_ = 0x423f8167c60, catalog_read_success_ = false}, lock_write_ranges_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c670 <vtable for txservice::LockWriteRangesOp+16>, retry_num_ = 3, is_running_ = false,
      static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, range_table_name_ = {{name_str_ = "", name_view_ = "\300\004\001\370#\004\000\000ests_arrayfind7"}, own_string_ = false,
      type_ = txservice::TableType::RangePartition, engine_ = txservice::TableEngine::EloqDoc}, lock_range_result_ = 0x423f8167c60,
    table_it_ = {<std::__detail::_Node_iterator_base<std::pair<txservice::TableName const, std::pair<unsigned long, std::map<txservice::TxKey, txservice::WriteSetEntry, std::less<txservice::TxKey>, std::allocator<std::pair<txservice::TxKey const, txservice::WriteSetEntry> > > > >, true>> = {_M_cur = 0x0}, <No data fields>},
--Type <RET> for more, q to quit, c to continue without paging--
    table_end_ = {<std::__detail::_Node_iterator_base<std::pair<txservice::TableName const, std::pair<unsigned long, std::map<txservice::TxKey, txservice::WriteSetEntry, std::less<txservice::TxKey>, std::allocator<std::pair<txservice::TxKey const, txservice::WriteSetEntry> > > > >, true>> = {_M_cur = 0x0}, <No data fields>},
    write_key_it_ = {first = {interface_ = 0x615f315f65000a2e, obj_addr_ = 54285755638318, static mask = 18446744073709551614}, second = {rec_ = std::unique_ptr<txservice::TxRecord> = {get() = 0x769a8f31b890 <vtable for mongo::KVCollectionCatalogEntry+16>}, op_ = 4160851552, cce_addr_ = {cce_lock_ptr_ = 25, node_group_id_ = 25, core_id_ = 0, term_ = std::atomic<long> = { 7305790156125334881 }}, key_shard_code_ = 4, forward_addr_ = std::unordered_map with 25 elements = {[1937011557] = {cce_lock_ptr_ = 7521983764434483553, node_group_id_ = 1929379890, core_id_ = 101, term_ = std::atomic<long> = { 4552531237664 }}<error reading variable: Cannot access memory at address 0x74736a2e74736574>...}}},
    write_key_end_ = {first = {interface_ = 0x615f315f65000a2e, obj_addr_ = 54285755638318, static mask = 18446744073709551614}, second = {rec_ = std::unique_ptr<txservice::TxRecord> = {get() = 0x769a8f31b890 <vtable for mongo::KVCollectionCatalogEntry+16>}, op_ = 4160851552, cce_addr_ = {cce_lock_ptr_ = 25, node_group_id_ = 25, core_id_ = 0, term_ = std::atomic<long> = { 7305790156125334881 }}, key_shard_code_ = 4, forward_addr_ = std::unordered_map with 25 elements = {[1937011557] = {cce_lock_ptr_ = 7521983764434483553, node_group_id_ = 1929379890, core_id_ = 101, term_ = std::atomic<long> = { 4552531237664 }}<error reading variable: Cannot access memory at address 0x74736a2e74736574>...}}}, init_ = false, execute_immediately_ = true}, acquire_write_ = {<txservice::TransactionOperation> = {
      _vptr.TransactionOperation = 0x769a85d2c6a0 <vtable for txservice::AcquireWriteOperation+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
    hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2b98 <vtable for txservice::CcHandlerResult<std::vector<txservice::AcquireKeyResult, std::allocator<txservice::AcquireKeyResult> > >+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = std::vector of length 0, capacity 2000,
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<std::vector<txservice::AcquireKeyResult, std::allocator<txservice::AcquireKeyResult> > >*>> = {<std::unary_function<txservice::CcHandlerResult<std::vector<txservice::AcquireKeyResult, std::allocator<txservice::AcquireKeyResult> > >*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0,
              _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0}, runtime_resume_func_ = 0x0}, acquire_write_entries_ = std::vector of length 0, capacity 2000,
    remote_ack_cnt_ = std::atomic<int> = { 0 }, rset_has_expired_ = false}, catalog_acquire_all_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c3d0 <vtable for txservice::CatalogAcquireAllOp+16>, retry_num_ = 3, is_running_ = false,
      static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, succeed_ = false, op_ = 0x0, lock_cluster_config_op_ = {<txservice::TransactionOperation> = {
        _vptr.TransactionOperation = 0x769a85d2c700 <vtable for txservice::ReadLocalOperation+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
      key_ = 0x769a85da73c0 <txservice::VoidKey::NegInfTxKey()::neg_inf_tx_key>, table_name_ = {{name_str_ = "", name_view_ = "__cluster_config"}, own_string_ = false, type_ = txservice::TableType::ClusterConfig, engine_ = txservice::TableEngine::None},
      rec_ = 0x423f8168820, execute_immediately_ = true, hd_result_ = 0x423f81687a0}, acquire_all_intent_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c430 <vtable for txservice::AcquireAllOp+16>, retry_num_ = 1,
        is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_results_ = std::vector of length 8, capacity 8 = {{<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
--Type <RET> for more, q to quit, c to continue without paging--
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f81686d0, _M_const_object = 0x423f81686d0, _M_function_pointer = 0x423f81686d0,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f81686d0}, _M_pod_data = "\320\206\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}}, upload_cnt_ = 0, finish_cnt_ = std::atomic<unsigned int> = { 0 }, fail_cnt_ = std::atomic<unsigned int> = { 0 },
      remote_ack_cnt_ = std::atomic<int> = { 0 }, table_name_ = 0x769a85da71a0 <txservice::catalog_ccm_name>, keys_ = std::vector of length 0, capacity 0, cc_op_ = txservice::CcOperation::ReadForWrite, protocol_ = txservice::CcProtocol::OCC},
    acquire_all_lock_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c430 <vtable for txservice::AcquireAllOp+16>, retry_num_ = 1, is_running_ = false, static tx_op_failed_ts_ = 0,
        op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_results_ = std::vector of length 8, capacity 8 = {{<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> --Type <RET> for more, q to quit, c to continue without paging--
>::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}, {<txservice::CcHandlerResultBase> = {
            _vptr.CcHandlerResultBase = 0x769a85d2c820 <vtable for txservice::CcHandlerResult<txservice::AcquireAllResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
            error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
            block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {last_vali_ts_ = 1, commit_ts_ = 1, node_term_ = -1, local_cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }},
            blocked_remote_cce_addr_ = std::vector of length 0, capacity 0, remote_ack_cnt_ = 0x0},
          post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::AcquireAllResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::AcquireAllResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8168738, _M_const_object = 0x423f8168738, _M_function_pointer = 0x423f8168738,
                  _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8168738}, _M_pod_data = "8\207\026\370#\004\000\000\000\000\000\000\000\000\000"},
              _M_manager = 0x769a853c3015 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
            _M_invoker = 0x769a853c2fd3 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::AcquireAllResult>*), txservice::AcquireAllOp::AcquireAllOp(txservice::TransactionExecution*)::<lambda(txservice::CcHandlerResult<txservice::AcquireAllResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::AcquireAllResult> *&&)>}, runtime_resume_func_ = 0x0}}, upload_cnt_ = 0, finish_cnt_ = std::atomic<unsigned int> = { 0 }, fail_cnt_ = std::atomic<unsigned int> = { 0 },
      remote_ack_cnt_ = std::atomic<int> = { 0 }, table_name_ = 0x769a85da71a0 <txservice::catalog_ccm_name>, keys_ = std::vector of length 0, capacity 0, cc_op_ = txservice::CcOperation::Write, protocol_ = txservice::CcProtocol::Locking},
    read_cluster_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x0, ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Normal,
        lock_type_ = txservice::LockType::NoLock, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, cluster_conf_rec_ = {<txservice::TxRecord> = {_vptr.TxRecord = 0x769a867c2d08 <vtable for txservice::ClusterConfigRecord+16>}, {node_group_configs_ptr_ = 0x0,
        node_group_configs_uptr_ = std::unique_ptr<std::unordered_map<unsigned int, std::vector<txservice::NodeConfig, std::allocator<txservice::NodeConfig> >, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<txservice::NodeConfig, std::allocator<txservice::NodeConfig> > > > >> = {get() = 0x0}}, is_config_owner_ = false, version_ = 0}}, set_ts_ = {<txservice::TransactionOperation> = {
      _vptr.TransactionOperation = 0x769a85d2c610 <vtable for txservice::SetCommitTsOperation+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
    hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2bd0 <vtable for txservice::CcHandlerResult<unsigned long>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
--Type <RET> for more, q to quit, c to continue without paging--
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = 1754231845991469,
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<unsigned long>*>> = {<std::unary_function<txservice::CcHandlerResult<unsigned long>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, validate_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c5e0 <vtable for txservice::ValidateOperation+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, static default_read_set_capacity = 16, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = true, is_finished_ = std::atomic<bool> = { true },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = true, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, update_txn_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c580 <vtable for txservice::UpdateTxnStatus+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, post_process_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c520 <vtable for txservice::PostProcessOp+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, stage_ = 0x423f81689b8, forward_to_update_txn_op_ = true, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { true },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, meta_data_hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { true }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, catalog_write_all_cnt_ = 0, catalog_post_all_hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { true }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, write_log_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c5b0 <vtable for txservice::WriteToLogOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, log_type_ = txservice::TxLogType::DATA, log_group_id_ = 0, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
        error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
        block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}, log_closure_ = {<google::protobuf::Closure> = {<No data fields>}, cntl_ = {<google::protobuf::RpcController> = {<No data fields>}, static FLAGS_IGNORE_EOVERCROWDED = 1, static FLAGS_SECURITY_MODE = 2,
        static FLAGS_ADDED_CONCURRENCY = 4, static FLAGS_READ_PROGRESSIVELY = 8, static FLAGS_PROGRESSIVE_READER = 16, static FLAGS_BACKUP_REQUEST = 32, static FLAGS_DESTROY_CID_IN_DONE = 128, static FLAGS_CLOSE_CONNECTION = 256, static FLAGS_LOG_ID = 512,
        static FLAGS_REQUEST_CODE = 1024, static FLAGS_PB_BYTES_TO_BASE64 = 2048, static FLAGS_ALLOW_DONE_TO_RUN_IN_PLACE = 4096, static FLAGS_USED_BY_RPC = 8192, static FLAGS_PB_JSONIFY_EMPTY_ARRAY = 65536, static FLAGS_ENABLED_CIRCUIT_BREAKER = 131072,
        static FLAGS_ALWAYS_PRINT_PRIMITIVE_FIELDS = 262144, static FLAGS_HEALTH_CHECK_CALL = 524288, static FLAGS_PB_SINGLE_REPEATED_TO_ARRAY = 1048576, static FLAGS_MANAGE_HTTP_BODY_ON_ERROR = 2097152, static FLAGS_WRITE_TO_SOCKET_IN_BACKGROUND = 4194304,
        _span = 0x0, _flags = 2048, _error_code = 0, _error_text = "", _remote_side = {ip = {s_addr = 0}, port = 0}, _local_side = {ip = {s_addr = 0}, port = 0}, _session_local_data = 0x0, _server = 0x0, _oncancel_id = {value = 0}, _auth_context = 0x0,
        _mongo_session_data = {px = 0x0}, _sampled_request = 0x0, _request_protocol = brpc::PROTOCOL_UNKNOWN, _max_retry = -123456789, _retry_policy = 0x0, _correlation_id = {value = 0}, _connection_type = brpc::CONNECTION_TYPE_UNKNOWN, _fail_limit = -123456789,
        _pipelined_count = 0, _timeout_ms = -123456789, _connect_timeout_ms = -123456789, _backup_request_ms = -123456789, _real_timeout_ms = -123456789, _deadline_us = -1, _timeout_id = 0, _begin_time_us = 0, _end_time_us = 0, _tos = 0, _preferred_index = -1,
        _request_compress_type = brpc::COMPRESS_TYPE_NONE, _response_compress_type = brpc::COMPRESS_TYPE_NONE, _inheritable = {log_id = 0, request_id = ""}, _pchan_sub_count = 0, _response = 0x0, _done = 0x0, _sender = 0x0, _request_code = 0,
        _single_server_id = 18446744073709551615, _lb = {px = 0x0}, _tmp_completion_info = {id = {value = 0}, responded = false}, _current_call = {nretry = 0, need_feedback = false, enable_circuit_breaker = false, touched_by_stream_creator = false,
          peer_id = 18446744073709551615, begin_time_us = 0, sending_sock = std::unique_ptr<brpc::Socket> = {get() = 0x0}, stream_user_data = 0x0}, _unfinished_call = 0x0, _accessed = 0x0, _stream_creator = 0x0, _pack_request = 0x0, _method = 0x0, _auth = 0x0,
        _request_buf = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0, length = 0,
                  block = 0x0}}}}}, _idl_names = {request_name = 0x769a82cdc5a9 "req", response_name = 0x769a82cd8d81 "res"}, _idl_result = 12345678987654321, _http_request = 0x0, _http_response = 0x0, _session_kv = std::unique_ptr<brpc::KVMap> = {get() = 0x0},
        _request_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0,
                  length = 0, block = 0x0}}}}}, _response_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0,
                  length = 0, block = 0x0}, {offset = 0, length = 0, block = 0x0}}}}}, _wpa = {px = 0x0}, _rpa = {px = 0x0}, _request_stream = 18446744073709551615, _response_stream = 18446744073709551615, _remote_stream_settings = 0x0, _thrift_method_name = "",


        _auth_flags = 0}, request_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 34, static _class_data_ = {
          copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
          merge_to_from = 0x769a845c5726 <txlog::LogRequest::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, {_impl_ = {request_ = {_constinit_ = {<No data fields>}, write_log_request_ = 0x0, replay_log_request_ = 0x0,
              update_ckpt_ts_request_ = 0x0, post_snapshot_request_ = 0x0, check_scale_status_request_ = 0x0, remove_cc_node_group_request_ = 0x0}, _cached_size_ = {size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}},
      response_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 35, static _class_data_ = {copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
          merge_to_from = 0x769a845c674a <txlog::LogResponse::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, static Success = txlog::LogResponse_ResponseStatus_Success, static Fail = txlog::LogResponse_ResponseStatus_Fail,
        static NotLeader = txlog::LogResponse_ResponseStatus_NotLeader, static Unknown = txlog::LogResponse_ResponseStatus_Unknown, static DuplicateMigrationTx = txlog::LogResponse_ResponseStatus_DuplicateMigrationTx,
        static DuplicateClusterScaleTx = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx, static ResponseStatus_MIN = txlog::LogResponse_ResponseStatus_Success, static ResponseStatus_MAX = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx,
        static ResponseStatus_ARRAYSIZE = 6, {_impl_ = {response_status_ = 0, response_ = {_constinit_ = {<No data fields>}, write_log_response_ = 0x0, replay_log_response_ = 0x0, update_ckpt_ts_response_ = 0x0, check_scale_status_response_ = 0x0}, _cached_size_ = {
              size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}}, hd_result_ = 0x423f8168ae8}}, flush_update_table_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c340 <vtable for txservice::FlushUpdateTableOp+16>, retry_num_ = 3,
      is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, op_ = 0x0, post_all_intent_op_ = {<txservice::TransactionOperation> = {
        _vptr.TransactionOperation = 0x769a85d2c400 <vtable for txservice::PostWriteAllOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
      hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
          error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
          block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
        post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Func--Type <RET> for more, q to quit, c to continue without paging--
tion_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
        runtime_resume_func_ = 0x0}, table_name_ = 0x769a85da71a0 <txservice::catalog_ccm_name>, keys_ = std::vector of length 0, capacity 0, recs_ = std::vector of length 0, capacity 0, op_type_ = txservice::OperationType::Update,
      write_type_ = txservice::PostWriteType::PrepareCommit}, update_kv_table_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c8e8 <vtable for txservice::AsyncOp<txservice::Void>+16>, retry_num_ = 3, is_running_ = false,
        static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
      op_func_ = {<std::_Maybe_unary_or_binary_function<void, txservice::AsyncOp<txservice::Void>&>> = {<std::unary_function<txservice::AsyncOp<txservice::Void>&, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16,
          static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8167800, _M_const_object = 0x423f8167800, _M_function_pointer = 0x423f8167800, _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8167800},
            _M_pod_data = "\000x\026\370#\004\000\000\000\000\000\000\000\000\000"},
          _M_manager = 0x769a853c334c <std::_Function_handler<void(txservice::AsyncOp<txservice::Void>&), txservice::FlushUpdateTableOp::FlushUpdateTableOp(txservice::TransactionExecution*)::<lambda(txservice::AsyncOp<txservice::Void>&)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
        _M_invoker = 0x769a853c330a <std::_Function_handler<void(txservice::AsyncOp<txservice::Void>&), txservice::FlushUpdateTableOp::FlushUpdateTableOp(txservice::TransactionExecution*)::<lambda(txservice::AsyncOp<txservice::Void>&)> >::_M_invoke(const std::_Any_data &, txservice::AsyncOp<txservice::Void> &)>}, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
          error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
          block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
        post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
            static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
        runtime_resume_func_ = 0x0}, worker_thread_ = {_M_id = {_M_thread = 0}}}, need_write_log_ = false, commit_log_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c5b0 <vtable for txservice::WriteToLogOp+16>, retry_num_ = 3,
        is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, log_type_ = txservice::TxLogType::DATA, log_group_id_ = 0, hd_result_ = {<txservice::CcHandlerResultBase> = {
          _vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
          error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
          block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
        post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
            static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
        runtime_resume_func_ = 0x0}, log_closure_ = {<google::protobuf::Closure> = {<No data fields>}, cntl_ = {<google::protobuf::RpcController> = {<No data fields>}, static FLAGS_IGNORE_EOVERCROWDED = 1, static FLAGS_SECURITY_MODE = 2,
          static FLAGS_ADDED_CONCURRENCY = 4, static FLAGS_READ_PROGRESSIVELY = 8, static FLAGS_PROGRESSIVE_READER = 16, static FLAGS_BACKUP_REQUEST = 32, static FLAGS_DESTROY_CID_IN_DONE = 128, static FLAGS_CLOSE_CONNECTION = 256, static FLAGS_LOG_ID = 512,
          static FLAGS_REQUEST_CODE = 1024, static FLAGS_PB_BYTES_TO_BASE64 = 2048, static FLAGS_ALLOW_DONE_TO_RUN_IN_PLACE = 4096, static FLAGS_USED_BY_RPC = 8192, static FLAGS_PB_JSONIFY_EMPTY_ARRAY = 65536, static FLAGS_ENABLED_CIRCUIT_BREAKER = 131072,
          static FLAGS_ALWAYS_PRINT_PRIMITIVE_FIELDS = 262144, static FLAGS_HEALTH_CHECK_CALL = 524288, static FLAGS_PB_SINGLE_REPEATED_TO_ARRAY = 1048576, static FLAGS_MANAGE_HTTP_BODY_ON_ERROR = 2097152, static FLAGS_WRITE_TO_SOCKET_IN_BACKGROUND = 4194304,
          _span = 0x0, _flags = 2048, _error_code = 0, _error_text = "", _remote_side = {ip = {s_addr = 0}, port = 0}, _local_side = {ip = {s_addr = 0}, port = 0}, _session_local_data = 0x0, _server = 0x0, _oncancel_id = {value = 0}, _auth_context = 0x0,
          _mongo_session_data = {px = 0x0}, _sampled_request = 0x0, _request_protocol = brpc::PROTOCOL_UNKNOWN, _max_retry = -123456789, _retry_policy = 0x0, _correlation_id = {value = 0}, _connection_type = brpc::CONNECTION_TYPE_UNKNOWN, _fail_limit = -123456789,
          _pipelined_count = 0, _timeout_ms = -123456789, _connect_timeout_ms = -123456789, _backup_request_ms = -123456789, _real_timeout_ms = -123456789, _deadline_us = -1, _timeout_id = 0, _begin_time_us = 0, _end_time_us = 0, _tos = 0, _preferred_index = -1,
          _request_compress_type = brpc::COMPRESS_TYPE_NONE, _response_compress_type = brpc::COMPRESS_TYPE_NONE, _inheritable = {log_id = 0, request_id = ""}, _pchan_sub_count = 0, _response = 0x0, _done = 0x0, _sender = 0x0, _request_code = 0,
          _single_server_id = 18446744073709551615, _lb = {px = 0x0}, _tmp_completion_info = {id = {value = 0}, responded = false}, _current_call = {nretry = 0, need_feedback = false, enable_circuit_breaker = false, touched_by_stream_creator = false,
            peer_id = 18446744073709551615, begin_time_us = 0, sending_sock = std::unique_ptr<brpc::Socket> = {get() = 0x0}, stream_user_data = 0x0}, _unfinished_call = 0x0, _accessed = 0x0, _stream_creator = 0x0, _pack_request = 0x0, _method = 0x0, _auth = 0x0,
          _request_buf = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0, length = 0,
                    block = 0x0}}}}}, _idl_names = {request_name = 0x769a82cdc5a9 "req", response_name = 0x769a82cd8d81 "res"}, _idl_result = 12345678987654321, _http_request = 0x0, _http_response = 0x0, _session_kv = std::unique_ptr<brpc::KVMap> = {get() = 0x0},
          _request_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0,
                    length = 0, block = 0x0}}}}}, _response_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0,
                    length = 0, block = 0x0}, {offset = 0, length = 0, block = 0x0}}}}}, _wpa = {px = 0x0}, _rpa = {px = 0x0}, _request_stream = 18446744073709551615, _response_stream = 18446744073709551615, _remote_stream_settings = 0x0, _thrift_method_name = "",


          _auth_flags = 0}, request_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 34, static _class_data_ = {
            copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
            merge_to_from = 0x769a845c5726 <txlog::LogRequest::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, {_impl_ = {request_ = {_constinit_ = {<No data fields>}, write_log_request_ = 0x0, replay_log_request_ = 0x0,



                update_ckpt_ts_request_ = 0x0, post_snapshot_request_ = 0x0, check_scale_status_request_ = 0x0, remove_cc_node_group_request_ = 0x0}, _cached_size_ = {size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}},
        response_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 35, static _class_data_ = {
            copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
            merge_to_from = 0x769a845c674a <txlog::LogResponse::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, static Success = txlog::LogResponse_ResponseStatus_Success, static Fail = txlog::LogResponse_ResponseStatus_Fail,
          static NotLeader = txlog::LogResponse_ResponseStatus_NotLeader, static Unknown = txlog::LogResponse_ResponseStatus_Unknown, static DuplicateMigrationTx = txlog::LogResponse_ResponseStatus_DuplicateMigrationTx,
          static DuplicateClusterScaleTx = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx, static ResponseStatus_MIN = txlog::LogResponse_ResponseStatus_Success, static ResponseStatus_MAX = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx,
          static ResponseStatus_ARRAYSIZE = 6, {_impl_ = {response_status_ = 0, response_ = {_constinit_ = {<No data fields>}, write_log_response_ = 0x0, replay_log_response_ = 0x0, update_ckpt_ts_response_ = 0x0, check_scale_status_response_ = 0x0}, _cached_size_ = {
                size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}}, hd_result_ = 0x423f8168fb0}}, clean_log_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c5b0 <vtable for txservice::WriteToLogOp+16>, retry_num_ = 3,
        is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, log_type_ = txservice::TxLogType::DATA, log_group_id_ = 0, hd_result_ = {<txservice::CcHandlerResultBase> = {
          _vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
          error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
          block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
        post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
            static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
        runtime_resume_func_ = 0x0}, log_closure_ = {<google::protobuf::Closure> = {<No data fields>}, cntl_ = {<google::protobuf::RpcController> = {<No data fields>}, static FLAGS_IGNORE_EOVERCROWDED = 1, static FLAGS_SECURITY_MODE = 2,
          static FLAGS_ADDED_CONCURRENCY = 4, static FLAGS_READ_PROGRESSIVELY = 8, static FLAGS_PROGRESSIVE_READER = 16, static FLAGS_BACKUP_REQUEST = 32, static FLAGS_DESTROY_CID_IN_DONE = 128, static FLAGS_CLOSE_CONNECTION = 256, static FLAGS_LOG_ID = 512,
          static FLAGS_REQUEST_CODE = 1024, static FLAGS_PB_BYTES_TO_BASE64 = 2048, static FLAGS_ALLOW_DONE_TO_RUN_IN_PLACE = 4096, static FLAGS_USED_BY_RPC = 8192, static FLAGS_PB_JSONIFY_EMPTY_ARRAY = 65536, static FLAGS_ENABLED_CIRCUIT_BREAKER = 131072,
          static FLAGS_ALWAYS_PRINT_PRIMITIVE_FIELDS = 262144, static FLAGS_HEALTH_CHECK_CALL = 524288, static FLAGS_PB_SINGLE_REPEATED_TO_ARRAY = 1048576, static FLAGS_MANAGE_HTTP_BODY_ON_ERROR = 2097152, static FLAGS_WRITE_TO_SOCKET_IN_BACKGROUND = 4194304,
          _span = 0x0, _flags = 2048, _error_code = 0, _error_text = "", _remote_side = {ip = {s_addr = 0}, port = 0}, _local_side = {ip = {s_addr = 0}, port = 0}, _session_local_data = 0x0, _server = 0x0, _oncancel_id = {value = 0}, _auth_context = 0x0,
          _mongo_session_data = {px = 0x0}, _sampled_request = 0x0, _request_protocol = brpc::PROTOCOL_UNKNOWN, _max_retry = -123456789, _retry_policy = 0x0, _correlation_id = {value = 0}, _connection_type = brpc::CONNECTION_TYPE_UNKNOWN, _fail_limit = -123456789,
          _pipelined_count = 0, _timeout_ms = -123456789, _connect_timeout_ms = -123456789, _backup_request_ms = -123456789, _real_timeout_ms = -123456789, _deadline_us = -1, _timeout_id = 0, _begin_time_us = 0, _end_time_us = 0, _tos = 0, _preferred_index = -1,
          _request_compress_type = brpc::COMPRESS_TYPE_NONE, _response_compress_type = brpc::COMPRESS_TYPE_NONE, _inheritable = {log_id = 0, request_id = ""}, _pchan_sub_count = 0, _response = 0x0, _done = 0x0, _sender = 0x0, _request_code = 0,
          _single_server_id = 18446744073709551615, _lb = {px = 0x0}, _tmp_completion_info = {id = {value = 0}, responded = false}, _current_call = {nretry = 0, need_feedback = false, enable_circuit_breaker = false, touched_by_stream_creator = false,
            peer_id = 18446744073709551615, begin_time_us = 0, sending_sock = std::unique_ptr<brpc::Socket> = {get() = 0x0}, stream_user_data = 0x0}, _unfinished_call = 0x0, _accessed = 0x0, _stream_creator = 0x0, _pack_request = 0x0, _method = 0x0, _auth = 0x0,
          _request_buf = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0, length = 0,
                    block = 0x0}}}}}, _idl_names = {request_name = 0x769a82cdc5a9 "req", response_name = 0x769a82cd8d81 "res"}, _idl_result = 12345678987654321, _http_request = 0x0, _http_response = 0x0, _session_kv = std::unique_ptr<brpc::KVMap> = {get() = 0x0},
          _request_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0, length = 0, block = 0x0}, {offset = 0,
                    length = 0, block = 0x0}}}}}, _response_attachment = {static DEFAULT_BLOCK_SIZE = 8192, static INITIAL_CAP = 32, static INVALID_AREA = 0, {_bv = {magic = 0, start = 0, refs = 0x0, nref = 0, cap_mask = 0, nbytes = 0}, _sv = {refs = {{offset = 0,
                    length = 0, block = 0x0}, {offset = 0, length = 0, block = 0x0}}}}}, _wpa = {px = 0x0}, _rpa = {px = 0x0}, _request_stream = 18446744073709551615, _response_stream = 18446744073709551615, _remote_stream_settings = 0x0, _thrift_method_name = "",


          _auth_flags = 0}, request_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 34, static _class_data_ = {
            copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
--Type <RET> for more, q to quit, c to continue without paging--
            merge_to_from = 0x769a845c5726 <txlog::LogRequest::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, {_impl_ = {request_ = {_constinit_ = {<No data fields>}, write_log_request_ = 0x0, replay_log_request_ = 0x0,
                update_ckpt_ts_request_ = 0x0, post_snapshot_request_ = 0x0, check_scale_status_request_ = 0x0, remove_cc_node_group_request_ = 0x0}, _cached_size_ = {size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}},
        response_ = {<google::protobuf::Message> = {<No data fields>}, static kIndexInFileMessages = 35, static _class_data_ = {
            copy_to_from = 0x769a83b96100 <google::protobuf::Message::CopyWithSourceCheck(google::protobuf::Message&, google::protobuf::Message const&)>,
            merge_to_from = 0x769a845c674a <txlog::LogResponse::MergeImpl(google::protobuf::Message&, google::protobuf::Message const&)>}, static Success = txlog::LogResponse_ResponseStatus_Success, static Fail = txlog::LogResponse_ResponseStatus_Fail,
          static NotLeader = txlog::LogResponse_ResponseStatus_NotLeader, static Unknown = txlog::LogResponse_ResponseStatus_Unknown, static DuplicateMigrationTx = txlog::LogResponse_ResponseStatus_DuplicateMigrationTx,
          static DuplicateClusterScaleTx = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx, static ResponseStatus_MIN = txlog::LogResponse_ResponseStatus_Success, static ResponseStatus_MAX = txlog::LogResponse_ResponseStatus_DuplicateClusterScaleTx,
          static ResponseStatus_ARRAYSIZE = 6, {_impl_ = {response_status_ = 0, response_ = {_constinit_ = {<No data fields>}, write_log_response_ = 0x0, replay_log_response_ = 0x0, update_ckpt_ts_response_ = 0x0, check_scale_status_response_ = 0x0}, _cached_size_ = {
                size_ = std::atomic<int> = { 0 }}, _oneof_case_ = {0}}}}, hd_result_ = 0x423f8169308}}}, sleep_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c310 <vtable for txservice::SleepOperation+16>, retry_num_ = 3,
      is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, sleep_secs_ = 0}, analyze_table_all_op_ = {<txservice::TransactionOperation> = {
      _vptr.TransactionOperation = 0x769a85d2c190 <vtable for txservice::AnalyzeTableAllOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0, op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
    static range_sample_pool_capacity_ = 128, analyze_tx_req_ = 0x0, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, broadcast_stat_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c160 <vtable for txservice::BroadcastStatisticsOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, broadcast_tx_req_ = 0x0, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>,
        is_blocking_ = false, is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 },
        remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, reload_cache_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c4f0 <vtable for txservice::ReloadCacheOperation+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = false,
        is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 },
        txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
          static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, fault_inject_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c4c0 <vtable for txservice::FaultInjectOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, fault_name_ = "", fault_paras_ = "", vct_node_id_ = std::vector of length 0, capacity 0, succeed_ = false, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2b60 <vtable for txservice::CcHandlerResult<bool>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR },
        ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = false,
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<bool>*>> = {<std::unary_function<txservice::CcHandlerResult<bool>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16,
          static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0}, runtime_resume_func_ = 0x0}},
  clean_entry_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c2e0 <vtable for txservice::CleanCcEntryForTestOp+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, tab_name_ = 0x0, key_ = 0x0, only_archives_ = false, flush_ = true, succeed_ = false, hd_result_ = {<txservice::CcHandlerResultBase> = {
        _vptr.CcHandlerResultBase = 0x769a867c2b60 <vtable for txservice::CcHandlerResult<bool>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR },
        ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = false,
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<bool>*>> = {<std::unary_function<txservice::CcHandlerResult<bool>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16,
          static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0}, runtime_resume_func_ = 0x0}},
  abundant_lock_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c1c0 <vtable for txservice::ReleaseScanExtraLockOp+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a867c2c08 <vtable for txservice::CcHandlerResult<txservice::PostProcessResult>+16>,
        is_blocking_ = false, is_finished_ = std::atomic<bool> = { false }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 },
        remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {conflicting_tx_cnt_ = std::atomic<int> = { 0 }, is_local_ = true},
      post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::PostProcessResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::PostProcessResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
      runtime_resume_func_ = 0x0}}, batch_read_op_ = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2bfe0 <vtable for txservice::BatchReadOperation+16>, retry_num_ = 3, is_running_ = false, static tx_op_failed_ts_ = 0,
      op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, batch_read_tx_req_ = 0x0, hd_result_vec_ = std::vector of length 1, capacity 1 = {{<txservice::CcHandlerResultBase> = {
          _vptr.CcHandlerResultBase = 0x769a867c2c40 <vtable for txservice::CcHandlerResult<txservice::ReadKeyResult>+16>, is_blocking_ = false, is_finished_ = std::atomic<bool> = { false },
          error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
          block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {rec_ = 0x0, ts_ = 0, cce_addr_ = {cce_lock_ptr_ = 0, node_group_id_ = 0, core_id_ = 0, term_ = std::atomic<long> = { -1 }}, rec_status_ = txservice::RecordStatus::Normal,
          lock_type_ = txservice::LockType::NoLock, is_local_ = true},
        post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::ReadKeyResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::ReadKeyResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423f8169988, _M_const_object = 0x423f8169988, _M_function_pointer = 0x423f8169988,
                _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423f8169988}, _M_pod_data = "\210\231\026\370#\004\000\000\000\000\000\000\000\000\000"},
            _M_manager = 0x769a853c42bb <std::_Function_handler<void(txservice::CcHandlerResult<txservice::ReadKeyResult>*), txservice::BatchReadOperation::BatchReadOperation(txservice::TransactionExecution*, txservice::CcHandlerResult<txservice::ReadKeyResult>*)::<lambda(txservice::CcHandlerResult<txservice::ReadKeyResult>*)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
          _M_invoker = 0x769a853c4279 <std::_Function_handler<void(txservice::CcHandlerResult<txservice::ReadKeyResult>*), txservice::BatchReadOperation::BatchReadOperation(txservice::TransactionExecution*, txservice::CcHandlerResult<txservice::ReadKeyResult>*)::<lambda(txservice::CcHandlerResult<txservice::ReadKeyResult>*)> >::_M_invoke(const std::_Any_data &, txservice::CcHandlerResult<txservice::ReadKeyResult> *&&)>}, runtime_resume_func_ = 0x0}}, local_cache_checked_ = false, unfinished_cnt_ = std::atomic<unsigned int> = { 0 },
    lock_range_result_ = 0x423f8167c60, lock_it_ = non-dereferenceable iterator for std::vector}, tx_duration_start_ = std::chrono::_V2::steady_clock time_point = { 2630209724919707ns }, is_collecting_duration_round_ = false}
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb)
(gdb) p tx_op_failed_ts_
$5 = 0
(gdb) p kv_create_index_op_
$6 = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c3a0 <vtable for txservice::DsUpsertTableOp+16>, retry_num_ = 100, is_running_ = true, static tx_op_failed_ts_ = 0,
    op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }}, table_name_ = 0x423c1890018, table_schema_old_ = 0x423bf69ab00, table_schema_ = 0x423bf69ba00, op_type_ = txservice::OperationType::AddIndex,
  hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a868b3b28 <vtable for txservice::CcHandlerResult<txservice::Void>+16>, is_blocking_ = true, is_finished_ = std::atomic<bool> = { true },
      error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 }, remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800,
      block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {<No data fields>},
    post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::Void>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::Void>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {
        static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0}, _M_invoker = 0x0},
    runtime_resume_func_ = 0x0}, alter_table_info_ = 0x423c1891890, write_time_ = 1754231846491833}
(gdb) p generate_sk_parallel_op_
$7 = {<txservice::TransactionOperation> = {_vptr.TransactionOperation = 0x769a85d2c858 <vtable for txservice::AsyncOp<txservice::GenerateSkParallelResult>+16>, retry_num_ = 3, is_running_ = true, static tx_op_failed_ts_ = 0,
    op_start_ = std::chrono::_V2::steady_clock time_point = { 9223372036854775807ns }},
  op_func_ = {<std::_Maybe_unary_or_binary_function<void, txservice::AsyncOp<txservice::GenerateSkParallelResult>&>> = {<std::unary_function<txservice::AsyncOp<txservice::GenerateSkParallelResult>&, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x423c1890000, _M_const_object = 0x423c1890000, _M_function_pointer = 0x423c1890000,
          _M_member_pointer = (void (std::_Undefined_class::*)(std::_Undefined_class * const)) 0x423c1890000, this adjustment 4552532588544}, _M_pod_data = "\000\000\211\301#\004\000\000\000x\026\370#\004\000"},
      _M_manager = 0x769a858586f1 <std::_Function_handler<void(txservice::AsyncOp<txservice::GenerateSkParallelResult>&), txservice::UpsertTableIndexOp::Forward(txservice::TransactionExecution*)::<lambda(txservice::AsyncOp<txservice::GenerateSkParallelResult>&)> >::_M_manager(std::_Any_data &, const std::_Any_data &, std::_Manager_operation)>},
    _M_invoker = 0x769a858586af <std::_Function_handler<void(txservice::AsyncOp<txservice::GenerateSkParallelResult>&), txservice::UpsertTableIndexOp::Forward(txservice::TransactionExecution*)::<lambda(txservice::AsyncOp<txservice::GenerateSkParallelResult>&)> >::_M_invoke(const std::_Any_data &, txservice::AsyncOp<txservice::GenerateSkParallelResult> &)>}, hd_result_ = {<txservice::CcHandlerResultBase> = {_vptr.CcHandlerResultBase = 0x769a85d2c888 <vtable for txservice::CcHandlerResult<txservice::GenerateSkParallelResult>+16>,
      is_blocking_ = true, is_finished_ = std::atomic<bool> = { true }, error_code_ = std::atomic<txservice::CcErrorCode> = { txservice::CcErrorCode::NO_ERROR }, ref_cnted_ = false, ref_cnt_ = std::atomic<unsigned int> = { 0 },
      remote_ref_cnt_ = std::atomic<unsigned int> = { 0 }, txm_ = 0x423f8167800, block_req_check_ts_ = std::atomic<unsigned long> = { 0 }}, result_ = {indexes_multikey_attr_ = std::vector of length 1, capacity 1 = {{index_name_ = 0x423c1671230, multikey_ = false,
          multikey_paths_ = std::unique_ptr<txservice::MultiKeyPaths> = {get() = 0x0}}}, pack_sk_error_ = {code_ = 0, message_ = ""}},
    post_lambda_ = {<std::_Maybe_unary_or_binary_function<void, txservice::CcHandlerResult<txservice::GenerateSkParallelResult>*>> = {<std::unary_function<txservice::CcHandlerResult<txservice::GenerateSkParallelResult>*, void>> = {<No data fields>}, <No data fields>}, <std::_Function_base> = {static _M_max_size = 16, static _M_max_align = 8, _M_functor = {_M_unused = {_M_object = 0x0, _M_const_object = 0x0, _M_function_pointer = 0x0, _M_member_pointer = NULL}, _M_pod_data = '\000' <repeats 15 times>}, _M_manager = 0x0},
      _M_invoker = 0x0}, runtime_resume_func_ = 0x0}, worker_thread_ = {_M_id = {_M_thread = 0}}}
(gdb) q
mono@151761b0-5ad9-4e36-a781-7fa14786d303:/tmp/build/dce06a3d/eloqdoc_pr/install/bin$